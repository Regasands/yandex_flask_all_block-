'''    apikey = "f3a0fe3a-b07e-4840-a1da-06f18b2ddf13"
    map_api_server = "https://static-maps.yandex.ru/v1?"
    
    params = {'ll': f'{koord[1]},{koord[0]}', 'spn': f'0.1,0.1',  'apikey': apikey, 'lang': 'ru_Ru'}
    response = requests.get(map_api_server, params=params)
    print(response.url)
    image = BytesIO(response.content)
    '''

import logging
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler
from datetime import datetime
import requests
from io import BytesIO

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)

TOKEN = '7872226772:AAE_yUSmr-VgTNYdncaVBDpf2m3BuaWAn8I'



async def start(update, context):
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ  –∞–¥—Ä–µ—Å—Å—É, –∂–¥—É –æ—Ç —Ç–µ–±—è –∞–¥—Ä–µ—Å—Å')


async def get_image(update, context):
    # –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –∫–æ—Ä–¥—ã –π–æ—É
    text = update.message.text  
    
    server_address = 'http://geocode-maps.yandex.ru/1.x/?'
    api_key = '8013b162-6b42-4997-9691-77b7074026e0'
    geocoder_request = f'{server_address}apikey={api_key}&geocode={text}&format=json'

    response = requests.get(geocoder_request)
    
    if response:
        json_response = response.json()
        toponym = json_response["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]
        # –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–ø–æ–Ω–∏–º–∞:
        toponym_address = toponym["metaDataProperty"]["GeocoderMetaData"]["text"]
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ —Ç–æ–ø–æ–Ω–∏–º–∞:
        koord = toponym["Point"]["pos"].split()
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:")

        await update.message.reply_text(f"{geocoder_request}")

        await update.message.reply_text(f"Http —Å—Ç–∞—Ç—É—Å: {response.status_code} ({response.reason})")
        return
    if text.lower() not in toponym_address.lower():
        await update.message.reply_text('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        return 

    # –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –±—Ä–æ—à–Ω—ã–π —è–Ω–¥–µ–∫—Å

    apikey = "f3a0fe3a-b07e-4840-a1da-06f18b2ddf13"
    map_api_server = "https://static-maps.yandex.ru/v1?"
    params = {
        'll': f'{koord[0]},{koord[1]}',  # –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
        'spn': '1,1',                     # –ú–∞—Å—à—Ç–∞–±
        'pt': f'{koord[0]},{koord[1]},vkbkm',  # –ú–µ—Ç–∫–∞ (vkbkm ‚Äî —Ç–∏–ø –º–µ—Ç–∫–∏)
        'apikey': apikey,
        'lang': 'ru_RU'}
    
    response = requests.get(map_api_server, params=params)
    image = BytesIO(response.content)
    await update.message.reply_photo(photo=image, caption=f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {koord[0]}, {koord[1]}\n–ú–∞—Å—à—Ç–∞–±: 1x1 –≥—Ä–∞–¥—É—Å.–ú–µ—Å—Ç–æ {toponym_address}")



def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.TEXT, get_image))
    app.run_polling()


if __name__ == '__main__':
    main()


